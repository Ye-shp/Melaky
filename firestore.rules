rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users: authenticated users can read profiles (needed for search). Each user can write own doc.
    match /users/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Friend requests: creator or recipient can read; only they can write status.
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid
      );
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow update: if request.auth != null && (
        // recipient can accept/decline
        (request.auth.uid == resource.data.toUserId && request.resource.data.status in ['accepted','declined']) ||
        // sender can cancel (delete)
        (request.auth.uid == resource.data.fromUserId && request.resource.data.status == 'cancelled')
      );
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.challengerId == request.auth.uid;
      allow update: if request.auth != null && (
        // challengee can submit proof and transition to awaiting_verification
        (request.auth.uid == resource.data.challengeeId && request.resource.data.status == 'awaiting_verification') ||
        // challenger can accept/decline and transition status
        (request.auth.uid == resource.data.challengerId)
      );

      // Votes subcollection for self-challenges; supporters can vote once
      match /votes/{voteId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if false;
      }

      // Progress reports subcollection
      match /progressReports/{reportId} {
        allow read: if request.auth != null;
        // Challengee may add reports; challenger can also add comments/notes via text if desired
        allow create: if request.auth != null && (
          request.auth.uid == resource.data.userId ||
          request.auth.uid == request.resource.data.userId
        );
        allow update, delete: if false;
      }
    }

    // Transactions: read own; writes via Cloud Functions only (using Admin SDK bypasses security)
    match /transactions/{txId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }

    // Onboarding intake responses (server writes; user can read own)
    match /intakeResponses/{docId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false; // written by Cloud Functions (Admin SDK)
    }
  }
}
